# This is a basic workflow to help you get started with Actions

name: Deploy to AWS ECS

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-duration-seconds: 1200

      - name: Deploy ECR through AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: log-docker-ecr
          template: cloudformation/ecr.yml
          no-fail-on-empty-changeset: "1"

      - name: Deploy VPC through AWS CloudFormation
        id: deploy-vpc
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: log-docker-vpc
          template: cloudformation/vpc.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: "AvailabilityZone1=${{ secrets.AWS_REGION }}a,AvailabilityZone2=${{ secrets.AWS_REGION }}b"
          no-fail-on-empty-changeset: "1"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # run composer:latest to install dependencies
          docker run --rm --volume $PWD/app:/app composer:latest install
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/log-docker-ecr:$IMAGE_TAG .
          docker push $ECR_REGISTRY/log-docker-ecr:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Deploy Fargate through AWS CloudFormation
        id: deploy-fargate
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: log-docker-fargate
          template: cloudformation/fargate.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: "NetworkStackName=${{ steps.deploy-vpc.outputs.Name }}"
          no-fail-on-empty-changeset: "1"

      - name: Download ECS task definition
        run: |
          aws ecs describe-task-definition --task-definition log-docker-fargate --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ steps.deploy-fargate.outputs.Name }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ steps.deploy-fargate.outputs.DefaultFargateServiceName }}
          cluster: ${{ steps.deploy-fargate.outputs.FargateEcsClusterName }}
          wait-for-service-stability: true
