AWSTemplateFormatVersion: 2010-09-09

# A CloudFormation template to create/configure an AWS Fargate Cluster, Application Load Balancer (ALB),
# Amazon Elastic Container Registry (ECR), AWS CodePipeline and Service based on parameters. Optionally,
# you can specify a domain name and/or an AWS Certificate Manager ARN can be passed if you want to
# enable TLS on the ALB. If you want to create the DNS alias to the ALB, your DNS must be hosted in
# Amazon Route 53.
#
# From the Startup Kit Templates, this template requires the name of an existing vpc.cfn.yml stack as
# a parameter.
#
# If you pass the optional database stack name, it pulls the values for the DB endpoint and username
# and sets them as environment variables in the container.
#
# The service creates CloudWatch Alarms to monitor CPU utilization in order to determine container
# counts (up and down), but other metrics may be more important in your system.
# See: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_autoscaling_tutorial.html
#
# This template is released under Apache Version 2.0, and can be forked, copied, modified,
# customized, etc. to match your application/system requirements.

Parameters:
  NetworkStackName:
    Type: String
    Description: Name of an active Startup Kit CloudFormation stack that contains networking resources
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  HostedZoneName:
    Type: String
    Description: The Amazon Route 53 Hosted Zone Name for the optional load balancer alias record - do not include a period at the end
    Default: ""
    AllowedPattern: "(^$|^((?!-)[A-Za-z0-9-]{1,63}(?<!-)\\.)+[A-Za-z]{2,6}$)" # Allow for a blank or a domain name
    ConstraintDescription: Please enter a valid Route 53 Hosted Zone Name

  LoadBalancerDomainName:
    Type: String
    Description: Domain name to create an Amazon Route 53 alias record for the load balancer
    Default: ""
    AllowedPattern: "(^$|^((?!-)[A-Za-z0-9-]{1,63}(?<!-)\\.)+[A-Za-z]{2,6}$)" # Allow for a blank or a domain name
    ConstraintDescription: Please enter a valid domain name

  AppProtocol:
    Type: String
    Description: The application server protocol
    Default: HTTP
    AllowedValues:
      - HTTP
      - HTTPS
    ConstraintDescription: Specify either HTTTP or HTTPS

  SSLCertificateArn:
    Type: String
    Description: The SSL/TLS certificate ARN
    MinLength: 0
    MaxLength: 2048
    Default: ""

  HealthCheckPath:
    Type: String
    Description: The path for the Application Load Balancer health check
    Default: /
    MinLength: 1
    MaxLength: 255
    ConstraintDescription: Value must be between 1 and 255 characters

  SeedDockerImage:
    Type: String
    Default: registry.hub.docker.com/library/nginx:1.13
    Description: Initial image before CodePipeline is executed. Existing application images in ECR should override this parameter

  DefaultContainerCpu:
    Type: Number
    Description: "Amount of CPU for the container - options available: https://aws.amazon.com/fargate/pricing/"
    Default: 256
    MinValue: 256
    MaxValue: 4096
    ConstraintDescription: "Value must be between 256 and 4096 - see: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_size"

  DefaultContainerMemory:
    Type: Number
    Description: "Amount of memory for the container - options available: https://aws.amazon.com/fargate/pricing/"
    Default: 512
    MinValue: 512
    MaxValue: 30720
    ConstraintDescription: "Value must be between 512 and 30720 - see: https://aws.amazon.com/fargate/pricing/"

  # Scaling params
  DefaultServiceScaleEvaluationPeriods:
    Description: The number of periods over which data is compared to the specified threshold
    Type: Number
    Default: 2
    MinValue: 2

  DefaultServiceCpuScaleOutThreshold:
    Type: Number
    Description: Average CPU value to trigger auto scaling out
    Default: 50
    MinValue: 0
    MaxValue: 100
    ConstraintDescription: Value must be between 0 and 100

  DefaultServiceCpuScaleInThreshold:
    Type: Number
    Description: Average CPU value to trigger auto scaling in
    Default: 25
    MinValue: 0
    MaxValue: 100
    ConstraintDescription: Value must be between 0 and 100

  DefaultTaskMinContainerCount:
    Type: Number
    Description: Minimum number of containers to run for the service
    Default: 1
    MinValue: 1
    ConstraintDescription: Value must be at least one

  DefaultTaskMaxContainerCount:
    Type: Number
    Description: Maximum number of containers to run for the service when auto scaling out
    Default: 2
    MinValue: 1
    ConstraintDescription: Value must be at least one

  ContainerLogRetentionInDays:
    Type: Number
    Default: 7

  MaxTaggedContainerImagesToRetain:
    Type: Number
    Description: The number of tagged container images to retain before expiring
    MinValue: 1
    MaxValue: 100
    ConstraintDescription: Value must be between 1 and 100
    Default: 20

  DaysToRetainUntaggedContainerImages:
    Type: Number
    Description: The number days to retain untagged container images before expiring
    MinValue: 1
    MaxValue: 100
    ConstraintDescription: Value must be between 1 and 100
    Default: 7

  EnvironmentName:
    Type: String
    Description: Environment name - dev or prod
    Default: dev
    AllowedValues:
      - dev
      - prod
    ConstraintDescription: Specify either dev or prod

Conditions:
  IsTlsEnabled: !Not [!Equals [!Ref SSLCertificateArn, ""]]

  CreateRoute53Record: !And
    - !Not [!Equals [!Ref LoadBalancerDomainName, ""]]
    - !Not [!Equals [!Ref HostedZoneName, ""]]

Resources:
  FargateEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  # The ALB lives in two public subnets. See the existing vpc.cfn.yml stack
  # for ELB/ALB and application security groups which define ingress ports.
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet1ID
        - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet2ID
      SecurityGroups:
        - Fn::ImportValue: !Sub ${NetworkStackName}-ELBSecurityGroupID
      Tags:
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: FargateCluster
          Value: !Ref FargateEcsCluster

  AlbRoute53Record:
    Type: AWS::Route53::RecordSet
    Condition: CreateRoute53Record
    Properties:
      Name: !Ref LoadBalancerDomainName
      HostedZoneName: !Sub ${HostedZoneName}.
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
    DependsOn: ApplicationLoadBalancer

  # The health checks can be further tuned if your requirements differ
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackName}-VpcID
      Port:
        Fn::ImportValue: !Sub ${NetworkStackName}-AppIngressPort
      Protocol: !Ref AppProtocol
      Matcher:
        HttpCode: "200"
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: !Ref AppProtocol
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "300"
      TargetType: ip
      Tags:
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
    DependsOn: ApplicationLoadBalancer

  # The namespace in Amazon CloudWatch Logs - see https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatchLogsConcepts.html
  DefaultLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /fargate/${AWS::StackName}/${EnvironmentName}
      RetentionInDays: !Ref ContainerLogRetentionInDays

  DefaultTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub "${AWS::StackName}-default-task-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  DefaultTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub "${AWS::StackName}-default-task-execution-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  DefaultFargateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref DefaultContainerCpu
      Memory: !Ref DefaultContainerMemory
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt DefaultTaskRole.Arn
      ExecutionRoleArn: !GetAtt DefaultTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref AWS::StackName
          Image: !Ref SeedDockerImage
          Essential: true
          PortMappings:
            - ContainerPort:
                Fn::ImportValue: !Sub ${NetworkStackName}-AppIngressPort

          # Environment variables can be customized by adding parameters/values below. Secrets
          # should be stored in AWS Systems Manager Parameter Store.
          # See: https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html
          Environment:
            - Name: ENVIRONMENT_NAME
              Value: !Ref EnvironmentName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref DefaultLogGroup
              awslogs-stream-prefix: !Ref AWS::StackName
    DependsOn:
      - DefaultLogGroup
      - DefaultTaskExecutionRole

  DefaultFargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref FargateEcsCluster
      ServiceName: !Ref AWS::StackName
      DesiredCount: !Ref DefaultTaskMinContainerCount
      LaunchType: FARGATE
      TaskDefinition: !Ref DefaultFargateTaskDefinition
      LoadBalancers:
        - ContainerName: !Ref AWS::StackName
          ContainerPort:
            Fn::ImportValue: !Sub ${NetworkStackName}-AppIngressPort
          TargetGroupArn: !Ref DefaultTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${NetworkStackName}-AppSecurityGroupID
          Subnets:
            - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet1ID
            - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet2ID
    DependsOn:
      - FargateEcsCluster
      - DefaultFargateTaskDefinition
      - LoadBalancerListener

  ServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-service-auto-scaling-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: "*"

  DefaultServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref DefaultTaskMinContainerCount
      MaxCapacity: !Ref DefaultTaskMaxContainerCount
      ResourceId: !Sub
        - service/${EcsClusterName}/${EcsDefaultServiceName}
        - EcsClusterName: !Ref FargateEcsCluster
          EcsDefaultServiceName: !GetAtt DefaultFargateService.Name
      RoleARN: !GetAtt ServiceAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    DependsOn:
      - DefaultFargateService
      - ServiceAutoScalingRole

  DefaultServiceScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref DefaultServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: 1
            MetricIntervalLowerBound: 0
    DependsOn: DefaultServiceScalingTarget

  DefaultServiceScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScaleInPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref DefaultServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: -1
            MetricIntervalUpperBound: 0
    DependsOn: DefaultServiceScalingTarget

  DefaultServiceScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: !Ref DefaultServiceScaleEvaluationPeriods
      Statistic: Average
      TreatMissingData: notBreaching
      Threshold: !Ref DefaultServiceCpuScaleOutThreshold
      AlarmDescription: Alarm to add capacity if CPU is high
      Period: 60
      AlarmActions:
        - !Ref DefaultServiceScaleOutPolicy
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value: !Ref FargateEcsCluster
        - Name: ServiceName
          Value: !GetAtt DefaultFargateService.Name
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
    DependsOn:
      - DefaultFargateService
      - DefaultServiceScaleOutPolicy

  DefaultServiceScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: !Ref DefaultServiceScaleEvaluationPeriods
      Statistic: Average
      TreatMissingData: notBreaching
      Threshold: !Ref DefaultServiceCpuScaleInThreshold
      AlarmDescription: Alarm to reduce capacity if container CPU is low
      Period: 300
      AlarmActions:
        - !Ref DefaultServiceScaleInPolicy
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value: !Ref FargateEcsCluster
        - Name: ServiceName
          Value: !GetAtt DefaultFargateService.Name
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
    DependsOn:
      - DefaultFargateService
      - DefaultServiceScaleInPolicy

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port:
        Fn::ImportValue: !Sub ${NetworkStackName}-ELBIngressPort
      Protocol: !If [IsTlsEnabled, HTTPS, HTTP]
      Certificates:
        - CertificateArn:
            !If [IsTlsEnabled, !Ref SSLCertificateArn, !Ref "AWS::NoValue"]
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
    DependsOn:
      - DefaultTargetGroup
      - ApplicationLoadBalancer

Outputs:
  Name:
    Description: Fargate Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-Name

  EnvironmentName:
    Description: Environment Name
    Value: !Ref EnvironmentName
    Export:
      Name: !Sub ${AWS::StackName}-EnvironmentName

  FargateEcsClusterName:
    Value: !Ref FargateEcsCluster
    Export:
      Name: !Sub ${AWS::StackName}-FargateEcsClusterName

  FargateEcsClusterArn:
    Value: !GetAtt FargateEcsCluster.Arn
    Export:
      Name: !Sub ${AWS::StackName}-FargateEcsClusterArn

  DefaultFargateServiceArn:
    Value: !Ref DefaultFargateService
    Export:
      Name: !Sub ${AWS::StackName}-DefaultFargateServiceArn

  DefaultFargateServiceName:
    Value: !GetAtt DefaultFargateService.Name
    Export:
      Name: !Sub ${AWS::StackName}-DefaultFargateServiceName

  ApplicationLoadBalancerArn:
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerArn

  ApplicationLoadBalancerDnsName:
    Value:
      !If [
        CreateRoute53Record,
        !Ref LoadBalancerDomainName,
        !GetAtt ApplicationLoadBalancer.DNSName,
      ]
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerDnsName

  ApplicationLoadBalancerBaseDnsName:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerBaseDnsName

  ApplicationLoadBalancerCanonicalHostedZoneId:
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerCanonicalHostedZoneId

  ApplicationLoadBalancerName:
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerName
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerName

  ApplicationLoadBalancerListenerArn:
    Value: !Ref LoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerListenerArn
